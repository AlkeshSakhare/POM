adb devices – It Prints a list of all attached emulator/device instances.
adb install "sample.apk"– It is used to install an apk file in to an Emulated/Connected Device. We will be pushing apk which we have downloaded above.
adb pull – It is used to fetch some data from Emulated device(remote) to local host(local)
adb push – It is used to push some data from local host(local) to Emulated Device(remote).Similarly we can also push file to the device.
adb forward – Forwards socket connections from a specified local port to a specified remote port on the emulator/device instance.
adb shell – Adb provides a Unix shell that you can use to run a variety of commands on an emulator or connected device.
adb shell pm uninstall -k com.packagename ---- uninstall app(or use adb uninstall <package_name>)
image=&url=loginV2&data={"EmployeeId":"C138630","Password":"ayush@2005","AppName":"Moneyversity","MachinId":"d33ca4162bad1173","MacAdd":""}&
adb shell pm list packages==== will show all apk package names
adb logcat  ==== show all logs 
adb shell rm /data/system/gesture.key ===remove pattern/pin lock

adb pull /data/app/com.example.mobitrail.axis_fcu.apk
adb pull /data/app/com.example.mobitrail.axis_fcu-1.apk

Killing adb   adb kill-server
Starting adb  adb start-server
------------------------------TO INSTALL APK-------------------------------------------------------------------------------------
com.axis.axisbdetracker
adb install -r MyApp.apk
-l: Install the package with forward lock.
-r: Reinstall an exisiting app, keeping its data.
-t: Allow test APKs to be installed.
-i <INSTALLER_PACKAGE_NAME>: Specify the installer package name.
-s: Install package on the shared mass storage (such as sdcard).
-f: Install package on the internal system memory.
-d: Allow version code downgrade.
uninstall [options] <PACKAGE>   Removes a package from the system.
Options:
-k: Keep the data and cache directories around after package removal.
adb shell in Android Studio
C:\Users\USERNAME\AppData\Local\Android\sdk\platform-tools
---------------------------GET INSTALLED APK PACKAGE WITH ENABLE / DISABLED --------------------------------------------------------


adb shell pm list packages  ==  To list all the installed packages
adb shell pm list packages -s  ==To list only the system packages, use the “-s” option.
adb shell pm list packages -3  ==To list only 3rd party (or non-system) packages, use the “-3” option.
adb shell pm list packages -f ==To list the package names as well as the path to the installed APK files, use the “-f” option
adb shell pm list packages -f -s==The “-f” option can be combined with the other options as well. For example, to list system package names with the installed package location, use the “-f -s” option.
adb shell pm list packages -d==To list all the disabled package names, use the “-d” option.
adb shell pm list packages -e==To list all the enabled package names, use the “-e” option.

------------------------------------GET SCREENSHOT OF APP----------------
adb shell screencap /sdcard/screen.png===The screenshot will be saved to /sdcard/screen.png. 
adb shell screencap -p /sdcard/screen.bin==TO save file with another extension..  pass the -p option to screencap.
adb pull /sdcard/screen.png   ===To pull the file from your Android device to your computer, use the adb pull command.
adb rm /sdcard/screen.png===  To delete file from Android device


adb logcat | grep -F "`adb shell ps | grep com.example.package | cut -c10-15`

https://developer.android.com/studio/command-line/adb.html
------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------
Apktool Usage
Used to decompile, recompile & re-sign using java signer.
Step 1.Decompile
Command: apktool d "filename.apk"
--- Mainly we will be decoding an APK file for that we need to run apktool d filename.apk. After running that , it will create a folder in the same directory with decompiled files in it.

Step 2.Recompile
command: apktool b "filename"
-- this will rebuild new apk file inside def folder.

-------------------------------------------------------------------------------------------------------------------

decompile recompile & sign
apktool if apkfile.apk
apktool d apkfile.apk

apktool b apkfile

 
sign apk
java -jar signapk.jar cetificate.pem key.pk8  apkfile.apk apkfilenew.apk




--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------
d2j-dex2jar

Command: d2j-dex2jar "filename.apk"
dex2jar is mainly used to convert an APK file in to a jar file containing reconstructed source code.
dex2jar filename.apk command will convert the APK file in to a jar file.
--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------
JD-GUI Usage

Command:  jdgui
Above we have converted the APK file in to a jar file.
Now you can open that jar file in JD-GUI and view that reconstructed source code.
First type jdgui in Appie,it will open JD-GUI within the Appie.
Then open up the jar file in JD-GUI.
--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------

Drozer

drozer (formerly Mercury) is the leading security testing framework for Android.
drozer allows you to search for security vulnerabilities in apps and devices by assuming the role of an app and interacting with the Dalvik VM, other apps' IPC endpoints and the underlying OS.
drozer provides tools to help you use, share and understand public Android exploits. It helps you to deploy a drozer Agent to a device through exploitation or social engineering. Using weasel (MWR's advanced exploitation payload) drozer is able to maximise the permissions available to it by installing a full agent, injecting a limited agent into a running process, or connecting a reverse shell to act as a Remote Access Tool (RAT).
drozer is open source software, maintained by MWR InfoSecurity, and can be downloaded from: mwr.to/droze



Setup:
Drozer is already installed in the Appie, if you using it then no need of installation and setup procedure.
1.First open up the Appie and the Genymotion Device.
2.Download Drozer App
3.Open the drozer application in running emulator and click the OFF button in the bottom of the app which will start a Embedded Server.
4.By default the server is listening on Port Number 31415 so in order to forward all commands of drozer client to drozer server we will use Android Debug    Bridge[ADB] to forward the connections.
5.Type "adb forward tcp:31415 tcp:31415" (without "") in the console.
6.Type "drozer console connect" (without "") and it will spilt the screen and open the drozer in the other part.

The above steps are needed to be done whenever we need to perform assessment through Drozer.

Now you can just type on list in the drozer console and it will list all the modules which came pre-installed with Drozer 
eg.
Command : run app.package.list  => Display package all installed app of emulator 
          run app.package.info --help  == > show help 
		  run app.package.manifest "app.package.name(without "")"-- show manifest of app
	  e.g.run app.package.manifest com.example.mobitrail.axis_fcu
	   run app.broadcast.info -a  com.axis.axisbdetracker
com.axis.esop
com.axis.fcu.axis_fcu
Command Reference
com.example.mobitrail.axis_fcu
Command	Description
run				Executes a drozer module
list		Show a list of all drozer modules that can be executed in the current session. This hides modules that you do not have suitable permissions to run.
shell	        Start an interactive Linux shell on the device, in the context of the Agent process.
cd				Mounts a particular namespace as the root of session, to avoid having to repeatedly type the full name of a module.
clean			Remove temporary files stored by drozer on the Android device.
contributors	Displays a list of people who have contributed to the drozer framework and modules in use on your system.
echo			Print text to the console.
exit			Terminate the drozer session.
help			Display help about a particular command or module.
load			Load a file containing drozer commands, and execute them in sequence.
module			Find and install additional drozer modules from the Internet.
permissions		Display a list of the permissions granted to the drozer Agent.
set				Store a value in a variable that will be passed as an environment variable to any Linux shells spawned by drozer.
unset			Remove a named variable that drozer passes to any Linux shells that it spawns.

mostly used command with e.g.
run app.package.attacksurface com.axis.leadsloans com.axis.crmbranchbanking
run app.service.info -a com.axis.leadsloans com.axis.crmbranchbanking
run app.brodcast.info -f  com.axis.leadsloans com.axis.crmbranchbanking
------------------------------------------------------------------------------------------------------------------------------------------------------------
Understanding AndroidManifest.xml (User permissions, Activitiy(es))

AndroidManifest.xml is very important part of an APK file espically when security is concerned.
Every service,ContentProvider,activity,Broadcast Receiver need to be mentioned in the AndroidManifest.xml file
Methods to View AndroidManifest.xml
1.Dexplorer ---- Mobile App
2.Show Java ---- Mobile App
3.In drozer cmd type command app.package.name(without "")--- drozer
4.In Appie console type "apktool d "filename.apk"(without "")" -- Apktool
5.In Appie Type sublime + In sublime Type (Ctrl+ F5) + F5 -- AndroGaurd
-----------x----0------x--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------
Insecure Data Storage (Hack App Data, Root Device storage /data/data/com.app.package)
See - mobile app
open drozer type -run app.package.attacksurface (org.owasp.goatdroid.fourgoats)package name com.axis.axisbdetracker
run app.provider.finduri (org.owasp.goatdroid.fourgoats)package name

adb pull /data/data/com.package_name/

How To Fix
1.Do not use MODE_WORLD_WRITEABLE or MODE_WORLD_READABLE modes for IPC files because they do not provide the ability to limit data access to particular applications, nor do they provide any control on data format.If you want to share data with other apps then use content provider instead which offers read and write permissions to other apps and can make dynamic permission grants on a case-by-case basis.
2.Avoid exclusively relying upon hardcoded encryption or decryption keys when storing sensitive information assets because those keys can be retrived after decompiling the app.
3.Consider providing an additional layer of encryption beyond any default encryption mechanisms provided by the operating system.
External Storage
-----------x----0------x--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------
Binary Protections (Source Code Obfuscation)

Android Application are delivered through an .apk file format which an adversary can reverse engineer it and can see all the code contained in it. Below are scenarios of reverse engineering an application:-
Adversary can analyze and determine which defensive measure are implemented in the app and also find a way to bypass those mechanism.
Also adversary can also insert the malicious code, recompile it and deliver to normal users.
For example, gaming apps which have some feature unlocked are widely downloaded by youngster through insecure sources(sometimes through Google PlayStore as well). Most of those modified apps contains malware and some contain advertising to gain profit from those users.
An adversary is the only threat agent in this case.

How To Fix
1.Application Code can be obfuscated with the help of Proguard but it is only able to slow down the adversary from reverse engineering android application, obfuscation doesn’t prevent reverse engineering.
2.For security conscious application’s application, Dexguard can be used. Dexguard is a commercial version of Proguard. Besides encrypting classes, strings, native libraries, it also adds tamper detection to let your application react accordingly if a hacker has tried to modify it or is accessing it illegitimately.


---------------------------------------------------------------------------------------------------------------------------------
SQLMAP
-- For checking SQL Injection - URL DB
-----------x----0------x--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------
AndroBugs Framework

AndroBugs Framework is an Android vulnerability analysis system that helps developers or hackers find potential security vulnerabilities in Android applications. No splendid GUI interface, but the most efficient (less than 2 minutes per scan in average) and more accurate.

Version: 1.0.0

Features:

Find security vulnerabilities in an Android app	
Check if the code is missing best practices
Check dangerous shell commands (e.g. “su”)
Collect Information from millions of apps
Check the app’s security protection (marked as <Hacker>, designed for app repackaging hacking)


Command:
androbugs -f app.apk	
-----------x----0------x--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------x--------------x----0------

---------------------------------------------------LOGCAT--------------------------------------------------------------



Verbose - Show all log messages (the default).
Debug - Show debug log messages that are useful during development only, as well as the message levels lower in this list.
Info - Show expected log messages for regular usage, as well as the message levels lower in this list.
Warn - Show possible issues that are not yet errors, as well as the message levels lower in this list.
Error - Show issues that have caused errors, as well as the message level lower in this list.
Assert - Show issues that the developer expects should never happen







Log.e: This is for when bad stuff happens. Use this tag in places like inside a catch statment. You know that an error has occurred and therefore you're logging an error.
Log.w: Use this when you suspect something shady is going on. You may not be completely in full on error mode, but maybe you recovered from some unexpected behavior. Basically, use this to log stuff you didn't expect to happen but isn't necessarily an error. Kind of like a "hey, this happened, and it's weird, we should look into it."
Log.i: Use this to post useful information to the log. For example: that you have successfully connected to a server. Basically use it to report successes.
Log.d: Use this for debugging purposes. If you want to print out a bunch of messages so you can log the exact flow of your program, use this. If you want to keep a log of variable values, use this.
Log.v: Use this when you want to go absolutely nuts with your logging. If for some reason you've decided to log every little thing in a particular part of your app, use the Log.v tag.
And as a bonus...

Log.wtf: Use this when stuff goes absolutely, horribly, holy-crap wrong. You know those catch blocks where you're catching errors that you never should get...yea, if you wanna log them use Log.wtf
--------------------------------------------------------------------------------------------------------------------------------

Package names are guaranteed to be unique so you can use the Log function with the tag as your package name and then filter by package name:

NOTE: As of Build Tools 21.0.3 this will no longer work as TAGS are restricted to 23 characters or less.

Log.<log level>("<your package name>", "message");

adb -d logcat <your package name>:<log level> *:S

-d denotes an actual device and -e denotes an emulator. If there's more than 1 emulator running you can use -s emulator-<emulator number> (eg, -s emulator-5558)

Example: adb -d logcat com.example.example:V *:S
		adb -d logcat com.example.example:D *:S
		adb -d logcat com.axis.fcu.axis_fcu:I *:S
		adb -d logcat com.example.example:W *:S
		adb -d logcat com.example.example:E *:S
adb -d logcat pms.mobitrail.com.projectmanagementsystem:V *:S
		com.axis.fcu.axis_fcu
 adb logcat | grep "pms.mobitrail.com.projectmanagementsystem"
com.fairbridge		
Or if you are using System.out.print to send messages to the log you can use adb -d logcat System.out:I *:S to show only calls to System.out.

You can find all the log levels and more info here: https://developer.android.com/studio/command-line/logcat.html

http://developer.android.com/reference/android/util/Log.html

EDIT: Looks like I jumped the gun a little and just realized you were asking about logcat in Eclipse. What I posted above is for using logcat through adb from the command line. I'm not sure if the same filters transfer over into Eclipse.


View Genymotion logs
file://C:\Users\alkesh\AppData\Local\Genymobile\Genymotion\deployed






-------------------------------------------------------------------------------------------------------------------
Extracting APK Using ADB
1.adb devices
2.adb shell pm list packages 
3.adb shell pm path <package_name>com.truecaller --- to get actul path of app
4.adb pull /data/app/com.truecaller-1/base.apk path/to/desired/location
------------------------------------------------------------------------------------------------------------------




What is Drozer?

Drozer is a Security & Attack Framework for Android Application Testing. Drozer is a tool that can be used for Mobile device review , Secure development of applications, BYOD approval and Mobile application testing.

There are 2 Versions of Drozer an Open Source and other one Pro version having following features

Gathering the information about the application
Find the attack surface
Test your Exposure to Public Exploits
Execute dynamic code on a device, to avoid the need to compile and install small test scripts.
Start Android emulators, provisioned with the drozer Agent and the app you want to investigate.
Simulate sensor input, such as GPS, to emulators to test the full attack surface.
View the attack surface as a graph. this will be helpful for the risk assessment reporting.
Drozer is having agent & server architecture so to start with assessment we have to install the agent in the emulator or connected device.

Command to install the Drozer agent on emulator or device

adb install drozer.apk

Start the service on the emulator or device

then give below command
adb forward tcp:31415 tcp:31415

open cmd and browse to drozer directory

To check drozer functionality or device connected

drozer console devices

To connect to the device or emulator

drozer console connect


To get the list of commands/modules

List


To get the help on syntax or parameters needs to be passed to the command
For eg.

run app.package.list -h


To search for an app

run app.package.list -f [keyword]

To get info of an app

run app.package.info -a [package name]
To check the attack surface 

run app.package.attacksurface [package name]


To get info about the activity 

run app.activity.info -a [package name]

To start the activity 

run app.activity.start --component[package name] [activity name]

To get info about providers 

run app.provider.info -a [package name]

To find uri for providers 

run app.provider.finduri [package name]

To get info from providers 

run app.provider.query [uri]

To check path traverssal vul in provider 

run scanner.provider.traversal -a [package name]

To check for Sql injection 

run scanner.provider.injection -a [package name]

To download a file from android device to local machine 

run tools.file.download [source path] [destination path]


To get info abt a service 

run app.service.info -a [package name]


To interact with the service 

run app.service.send [package name] [service name] --msg [msg to service]


To interact with broadcast receiver

run app.broadcast.send --action [action from android_manifest file] --component [package name] [broadcast reciever] --extra string[string to send like in sendind sms we can send phone number for that we need to check source for input parameter]
For eg: run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS --component org.owasp.goatdroid.fourgoats org.owasp.goatdroid.fourgoats.broadcastreceivers.SendSMSNowReceiver --extra string phoneNumber 5554 --extra string message U R Just PWNED!!!!!
